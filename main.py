import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from datetime import datetime
import pytz

API_TOKEN = "8199710253:AAEO-Es0AIkuAS0H19Z3QHF2sfQSG58tcaI"

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

night_mode_enabled = False
creator_id = None
chat_id = None


@dp.message_handler(commands=["on"])
async def enable_night_mode(message: types.Message):
    global night_mode_enabled, creator_id, chat_id
    if message.chat.type not in ["supergroup", "group"]:
        return await message.reply("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ.")
    
    creator_id = message.from_user.id
    chat_id = message.chat.id
    night_mode_enabled = True
    await message.reply("‚úÖ –ù–æ—á–Ω–æ–π —Ä–µ–∂–∏–º –í–ö–õ–Æ–ß–ï–ù.")


@dp.message_handler(commands=["off"])
async def disable_night_mode(message: types.Message):
    global night_mode_enabled
    night_mode_enabled = False
    await message.reply("‚ùå –ù–æ—á–Ω–æ–π —Ä–µ–∂–∏–º –í–´–ö–õ–Æ–ß–ï–ù.")


@dp.message_handler(commands=["help"])
async def help_command(message: types.Message):
    text = (
        "üìñ –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:\n\n"
        "/on ‚Äì –≤–∫–ª—é—á–∏—Ç—å –Ω–æ—á–Ω–æ–π —Ä–µ–∂–∏–º\n"
        "/off ‚Äì –≤—ã–∫–ª—é—á–∏—Ç—å –Ω–æ—á–Ω–æ–π —Ä–µ–∂–∏–º\n\n"
        "‚ÑπÔ∏è –° 00:00 –¥–æ 06:00 (–ø–æ –ö–∏–µ–≤—É) –±–æ—Ç –±—É–¥–µ—Ç "
        "–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫–ª—é—á–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–∏—Å–∞—Ç—å –≤—Å–µ–º, –∫—Ä–æ–º–µ —Å–æ–∑–¥–∞—Ç–µ–ª—è –≥—Ä—É–ø–ø—ã."
    )
    await message.reply(text)


async def night_mode_task():
    global night_mode_enabled, creator_id, chat_id
    kiev_tz = pytz.timezone("Europe/Kiev")

    while True:
        if night_mode_enabled and creator_id and chat_id:
            now = datetime.now(kiev_tz)
            try:
                if 0 <= now.hour < 6:
                    members = await bot.get_chat_administrators(chat_id)
                    for member in members:
                        if member.user.id != creator_id:
                            await bot.restrict_chat_member(
                                chat_id,
                                member.user.id,
                                permissions=types.ChatPermissions(can_send_messages=False)
                            )
                else:
                    members = await bot.get_chat_administrators(chat_id)
                    for member in members:
                        await bot.restrict_chat_member(
                            chat_id,
                            member.user.id,
                            permissions=types.ChatPermissions(can_send_messages=True)
                        )
            except Exception as e:
                print("–û—à–∏–±–∫–∞:", e)

        await asyncio.sleep(60)


async def on_startup(_):
    asyncio.create_task(night_mode_task())


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
